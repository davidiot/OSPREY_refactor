/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.duke.cs.osprey.structure;

import java.io.BufferedOutputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;

/**
 *
 * @author mhall44
 */
public class PDBFileWriter {
    
    //USE THIS OPTIONALLY WHEN FIND GMEC
    //ALSO IN DEBUGGING, DOF UNIT TESTS TO MAKE SURE STRUCTURE CHANGES ARE AS DESIRED
    
    Molecule molec;
    PrintStream pw;
    String comment;
    double energy;

    
    public PDBFileWriter(Molecule molec, PrintStream pw, String comment, double energy) {
        this.molec = molec;
        this.pw = pw;
        this.comment = comment;
        this.energy = energy;
    }
    
    

    
    public static void writePDBFile(Molecule molec, String PDBFileName, double energy){
            //output the molecule structure as a PDB file, without modifying the molecule
        
            try{
                    FileOutputStream fileOutputStream = new FileOutputStream(PDBFileName);
                    BufferedOutputStream bufferedOutputStream = new BufferedOutputStream(
                                    fileOutputStream);
                    PrintStream printStream = new PrintStream(bufferedOutputStream);
                    
                    String comment = "";
                    PDBFileWriter writer = new PDBFileWriter(molec,printStream,comment,energy);
                    writer.write();
                    printStream.close();
            }
            catch (IOException e) {
                    System.out.println("ERROR: An io exception occurred while writing file "+PDBFileName);
                    System.exit(0);
            }
            catch ( Exception e ){
                    System.out.println(e.toString());
                    System.out.println("ERROR: An exception occurred while writing file");
                    System.exit(0);
            }
    }

    
    public static void writePDBFile(Molecule molec, String PDBFileName){
        //default energy is 0 (i.e., not providing energy)
        writePDBFile(molec,PDBFileName,0);
    }
    
    
    private void write(){
            //The actual writing procedure
        
            int atomCounter = 1;
            //int residueCounter = 0;
            //int prevResNum = -1;

            pw.println("AUTHOR generated by ILMM");
            pw.println("REMARK   6 " + comment);
            pw.println("REMARK   7 " + energy);

            //tmpChr will be the array of characters in each line
            //we'll adjust tmpChr to represent each line, then write it to the output file
            char[] tmpChr = new char[80];
            String tmpStg;
            Integer tmpInt;
            int tmpLen;
            for(int q=0; q<80; q++)  // clear the array
                    tmpChr[q]=' ';
            
            for(int resNum=0; resNum<molec.residues.size(); resNum++){
                    
                    Residue residue = molec.residues.get(resNum);
                    if (residue.atoms.isEmpty())
                            continue;
                    
                    //residueCounter++;
                    
                    tmpStg = residue.fullName;
                    //We'll call the residue by its full name in the PDB file
                    //full name should occupy columns 17-26 (zero-based).  
                    tmpStg.getChars(0,10,tmpChr,17);
                    
                    /*
                    tmpLen = 3-tmpStg.length();
                    if (tmpLen <= 0)
                            tmpStg.getChars(0,3,tmpChr,17);
                    else {
                            // from 17-19 (zero based)
                            tmpStg.getChars(0,tmpStg.length(),tmpChr,17+tmpLen);
                            for(int q=tmpStg.length();q<3;q++)  // add whitespace on left
                                    tmpChr[19-q]=' ';
                    }
                    tmpStg = residue.getPDBResNumber();
                    tmpLen = 4-tmpStg.length();
                    String kabatL = " ";
                    // PGC 2013: support for Kabat formatting: if tmpStg ends in a letter, then this letter will go into field 26.
                    if (tmpStg.matches(".*[A-Z]$")){
                            kabatL = tmpStg.substring(tmpStg.length()-1, tmpStg.length() );
                            tmpStg = tmpStg.substring(0, tmpStg.length()-1);
                            tmpLen = 4-tmpStg.length();
                    }

                    if (tmpLen <= 0)
                            tmpStg.getChars(0,4,tmpChr,22);
                    else {
                            // from 22-25 (zero based)
                            tmpStg.getChars(0,tmpStg.length(),tmpChr,22+tmpLen);
                            for(int q=tmpStg.length();q<4;q++)  // add whitespace on left
                                    tmpChr[25-q]=' ';
                    }

                    kabatL.getChars(0, 1, tmpChr, 26);*/
                    
                    //now, with the residue name set in tmpChr, write each of the atoms in the residue
                    for(int atNum=0; atNum<residue.atoms.size(); atNum++){
                            Atom atom = residue.atoms.get(atNum);
                            tmpStg = "ATOM  ";
                            tmpStg.getChars(0,6,tmpChr,0);  // Copy over the ATOM term
                            tmpStg = "1.00";
                            tmpStg.getChars(0,4,tmpChr,56); // Make the occupancy 1.00
                            tmpStg = "0.00";
                            tmpStg.getChars(0,4,tmpChr,62); // and the temp factor 0.0

                            tmpInt = new Integer(atomCounter);
                            tmpStg = tmpInt.toString();
                            tmpLen = 5-tmpStg.length();
                            if (tmpLen <= 0)
                                    tmpStg.getChars(0,5,tmpChr,6);
                            else {
                                    // from 6-10 (zero based)
                                    tmpStg.getChars(0,tmpStg.length(),tmpChr,6+tmpLen);
                                    for(int q=tmpStg.length();q<5;q++)  // add whitespace on left
                                            tmpChr[10-q]=' ';
                            }
                            atom.modelAtomNumber = atomCounter++;

                            // writing the atom name is a little fuzzy, although the
                            //  atom name is allocated columns 12-15(zero based), rasmol
                            //  likes and other people essentially start with column 13
                            //  leaving column 12 blank. So we only allow 3 characters for
                            //  the atom name and it should be left justified
                            //  unless the first character is a number in which case we
                            //  start with column 12
                            // there are also exceptions when the atom has a two letter
                            //  element code

                            tmpStg = getAtomField(atom);
                            tmpStg.getChars(0,4,tmpChr,12);
                            
                            
                            double atomCoords[] = atom.getCoords();

                            // Write the x coordinate
                            tmpStg = coordinate(atomCoords[0]);
                            tmpLen = 8-tmpStg.length();
                            if (tmpLen < 0) {
                                    System.out.println("ERROR: coordinate exceeds pdb format size");
                                    tmpStg.getChars(0,8,tmpChr,30);
                            }
                            else {
                                    // from 30-37 (zero based)
                                    tmpStg.getChars(0,tmpStg.length(),tmpChr,30+tmpLen);
                                    for(int q=tmpStg.length();q<8;q++)  // add whitespace on left
                                            tmpChr[37-q]=' ';
                            }

                            // Write the y coordinate
                            tmpStg = coordinate(atomCoords[1]);
                            tmpLen = 8-tmpStg.length();
                            if (tmpLen < 0) {
                                    System.out.println("ERROR: coordinate exceeds pdb format size");
                                    tmpStg.getChars(0,8,tmpChr,38);
                            }
                            else {
                                    // from 38-45 (zero based)
                                    tmpStg.getChars(0,tmpStg.length(),tmpChr,38+tmpLen);
                                    for(int q=tmpStg.length();q<8;q++)  // add whitespace on left
                                            tmpChr[45-q]=' ';
                            }

                            // Write the z coordinate
                            tmpStg = coordinate(atomCoords[2]);
                            tmpLen = 8-tmpStg.length();
                            if (tmpLen < 0) {
                                    System.out.println("ERROR: coordinate exceeds pdb format size");
                                    tmpStg.getChars(0,8,tmpChr,46);
                            }
                            else {
                                    // from 46-53 (zero based)
                                    tmpStg.getChars(0,tmpStg.length(),tmpChr,46+tmpLen);
                                    for(int q=tmpStg.length();q<8;q++)  // add whitespace on left
                                            tmpChr[53-q]=' ';
                            }

                            pw.println(new String(tmpChr));
                    }
            }
            
            pw.println("END");
    }

    
    private static String coordinate(double coord){
            if((coord<0.001) && (coord>-0.001))
                    coord = 0.0f;
            String coordString = String.valueOf(coord);
            String intPart = " ";
            String doublePart = " ";
            String returnString = null;
            int radix = coordString.indexOf(".");
            if (radix != -1){
                    intPart = coordString.substring(0, radix);
                    if (radix != coordString.length())
                            doublePart = coordString.substring(radix+1);
            }
            else 
                    return(coordString);
            if (intPart.length() == 1)
                    returnString = "   " + intPart;
            else if (intPart.length() == 2)
                    returnString = "  " + intPart;
            else if (intPart.length() == 3)
                    returnString = " " + intPart;
            else if (intPart.length() == 4)
                    returnString = intPart;
            else if (intPart.length() > 4)
                    returnString = intPart.substring(0, 3);
            returnString += ".";
            if (doublePart.length() == 1)
                    returnString += doublePart + "00";
            else if (doublePart.length() == 2)
                    returnString += doublePart + "0";
            else if (doublePart.length() == 3)
                    returnString += doublePart;
            else if (doublePart.length() > 3)
                    returnString += doublePart.substring(0, 3);
            return(returnString);
    }
    

    //Returns the atom name field
    private static String getAtomField(Atom at){
            if(at.elementType.length()==1) {
                    if (at.name.length() == 1)
                            return(" " + at.name + "   ");
                    else if (at.name.length() == 2){
                            if ( (at.name.charAt(0)>='0') && (at.name.charAt(0)<='9') )
                                    return(at.name + "   ");
                            else
                                    return(" " + at.name + "  ");
                    }
                    else if (at.name.length() == 3){
                            if ( (at.name.charAt(0)>='0') && (at.name.charAt(0)<='9') )
                                    return(at.name + "  ");
                            else
                                    return(" " + at.name + " ");
                    }
                    else // (at.name.length() > 3)
                            return(at.name.substring(0, 4) + " ");
            }
            else
            {
                    if (at.name.length() == 2)
                            return(at.name + "   ");
                    else if (at.name.length() == 3)
                            return(at.name + "  ");
                    else // (at.name.length() > 3)
                            return(at.name.substring(0, 4) + " ");
            }
    }
    
}
